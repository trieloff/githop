#!/bin/zsh


basetag="trieloff/"

get-tag() {
	echo $1
	if [ "$1" = "java" ]; then
		echo "${basetag}githop:java"
	elif [ "$1" = "clojure" ]; then
		echo "${basetag}githop:clojurescript"
	elif [ "$1" = "clojurescript" ]; then
		echo "${basetag}githop:clojurescript"
	elif [ "$1" = "haskell" ]; then
		echo "${basetag}githop:haskell"
	elif [ "$1" = "erlang" ]; then
		echo "${basetag}githop:erlang"
	elif [ "$1" = "elixir" ]; then
		echo "${basetag}githop:elixir"
	elif [ "$1" = "javascript" ]; then
		echo "${basetag}githop:node"
	else
		echo "${basetag}githop"
	fi
}

get-host() {
	host=$(echo $1 | sed -e "s/\.git$//" | sed -e "s|.*[@/]\(.*\)\(.*\)[/:]\(.*\)/\(.*\)|\1|")
	echo $host
}

get-org() {
	org=$(echo $1 | sed -e "s/\.git$//" | sed -e "s|.*[@/]\(.*\)\(.*\)[/:]\(.*\)/\(.*\)|\3|")
	echo $org
}

get-name() {
	name=$(echo $1 | sed -e "s/\.git$//" | sed -e "s|.*[@/]\(.*\)\(.*\)[/:]\(.*\)/\(.*\)|\4|")
	echo $name
}

get-langs() {
	if (( ${+GITHUB_TOKEN} )); then
		curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.$host/repos/$org/$name/languages | jq -r "to_entries[0].key" | tr '[:upper:]' '[:lower:]'
	else
		>&2 echo "Set GITHUB_TOKEN to avoid rate limit issues"
		curl -s https://api.$host/repos/$org/$name/languages | jq -r "to_entries[0].key" | tr '[:upper:]' '[:lower:]'
	fi
}

tag="githop"

if [[ "$1" == .* ]]; then
	tag="${tag}${1#.}"
	shift
elif [[ "$1" == :* ]]; then
	tag="${basetag}${tag}${1}"
	shift
else
	name=$(get-name $1)
	org=$(get-org $1)
	host=$(get-host $1)
	language=$(get-langs $host $org $name)
	tag=$(get-tag $language)
fi

echo $tag

name=$(echo $1 | sed -e "s/.*\\///" | sed -e "s/\\.git$//")

dockers=$(docker ps | wc -l | sed -e "s/ //g")

CONTAINER=$(docker run -p ${dockers}548:548 -it -d ${tag})
echo "Started $CONTAINER"

if [ $(uname) = "Darwin" ]; then
	echo "Setting up AFP daemon"

	docker exec $CONTAINER sed -i "10s/.*/[${name}]/" /etc/afp.conf
	docker exec $CONTAINER sed -i "11s|.*|path = /code/${name}|" /etc/afp.conf
	docker exec $CONTAINER sed -i "16s/.*/valid users = afp/" /etc/afp.conf

	echo "Creating Login User"
	echo "afp:$CONTAINER" | docker exec -i $CONTAINER chpasswd
	docker exec $CONTAINER chown -R afp /code

	echo "Starting AFP daemon"

	docker exec $CONTAINER netatalk
	
	#docker exec $CONTAINER /docker-entrypoint.sh
fi

echo "Copying essential files"
docker cp ~/.ssh/id_rsa $CONTAINER:/root/.ssh/id_rsa
docker cp ~/.m2/settings.xml $CONTAINER:/root/.m2/settings.xml
docker cp ~/.ssh/known_hosts $CONTAINER:/root/.ssh/known_hosts
docker cp ~/.gitconfig $CONTAINER:/root/.gitconfig

docker cp ~/.ssh/id_rsa $CONTAINER:/code/.ssh/id_rsa
docker cp ~/.m2/settings.xml $CONTAINER:/code/.m2/settings.xml
docker cp ~/.ssh/known_hosts $CONTAINER:/code/.ssh/known_hosts
docker cp ~/.gitconfig $CONTAINER:/code/.gitconfig

docker exec $CONTAINER chown -R afp /code

echo "Checking out repos in container"
docker exec $CONTAINER /usr/bin/githop $@

if [ $(uname) = "Darwin" ]; then
	mkdir -p $name
	echo "Mounting Evide^H Workspace"

	echo mount_afp afp://afp:${CONTAINER}@localhost:${dockers}548/${name} ${name}
	mount_afp afp://afp:${CONTAINER}@localhost:${dockers}548/${name} ${name}	
	
fi

echo "Logging into container"
docker attach $CONTAINER

echo "Killing container"
docker kill $CONTAINER

if [ $(uname) = "Darwin" ]; then

	echo "Unmounting Workspace"
	diskutil unmount force $name &
	rm -r $name

fi

echo "Done."