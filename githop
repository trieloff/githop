#!/bin/zsh

ESSENTIALS=(".ssh/id_rsa" ".m2/settings.xml" ".ssh/known_hosts" ".gitconfig" ".wskprops" ".lein/profiles.clj" ".gnupg")

basetag="trieloff/"

get-tag() {
	if [ "$1" = "java" ]; then
		echo "${basetag}githop:java"
	elif [ "$1" = "clojure" ]; then
		echo "${basetag}githop:clojurescript"
	elif [ "$1" = "clojurescript" ]; then
		echo "${basetag}githop:clojurescript"
	elif [ "$1" = "haskell" ]; then
		echo "${basetag}githop:haskell"
	elif [ "$1" = "erlang" ]; then
		echo "${basetag}githop:erlang"
	elif [ "$1" = "elixir" ]; then
		echo "${basetag}githop:elixir"
	elif [ "$1" = "javascript" ]; then
		echo "${basetag}githop:node"
	else
		echo "${basetag}githop"
	fi
}

get-host() {
	host=$(echo $1 | sed -e "s/\.git$//" | sed -e "s|.*[@/]\(.*\)\(.*\)[/:]\(.*\)/\(.*\)|\1|")
	echo $host
}

get-org() {
	org=$(echo $1 | sed -e "s/\.git$//" | sed -e "s|.*[@/]\(.*\)\(.*\)[/:]\(.*\)/\(.*\)|\3|")
	echo $org
}

get-name() {
	name=$(echo $1 | sed -e "s/\.git$//" | sed -e "s|.*[@/]\(.*\)\(.*\)[/:]\(.*\)/\(.*\)|\4|")
	echo $name
}

get-langs() {
	if (( ${+GITHUB_TOKEN} )); then
		curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.$host/repos/$org/$name/languages | jq -r "to_entries[0].key" | tr '[:upper:]' '[:lower:]'
	else
		>&2 echo "Set GITHUB_TOKEN to avoid rate limit issues"
		curl -s https://api.$host/repos/$org/$name/languages | jq -r "to_entries[0].key" | tr '[:upper:]' '[:lower:]'
	fi
}

free-port() {
	for i in {1..100}; do
		docker ps -f "expose=548" | grep "0.0.0.0:${i}548" > /dev/null
		if [ $? -eq 1 ];then
			echo $i
			return
		fi
	done
}

tag="githop"

if [[ "$1" == .* ]]; then
	tag="${tag}${1#.}"
	shift 
elif [[ "$1" == :* ]]; then
	tag="${basetag}${tag}${1}"
	shift
else
	name=$(get-name $1)
	org=$(get-org $1)
	host=$(get-host $1)
	language=$(get-langs $host $org $name)
	tag=$(get-tag $language)
fi

echo $tag

branch="master"
dockerargs=""

#get the git@ URL for different URL formats 
set -A repos
for repo in $@; do
#	echo $repo
	if [[ "$repo" == "--" ]]; then
		shift
#		echo "got the end of the args"
		dockerargs=$(echo $@ | sed -e "s/.* -- //")
#		echo "that's all"
		break;
	elif [[ "$repo" == :* ]]; then
#		echo "branch: $repo"
		branch="${repo:1}"
	else
		echo $repo
		name=$(get-name $repo)
		org=$(get-org $repo)
		host=$(get-host $repo)
		repos+=("git@$host:$org/$name.git")
	fi
done

echo Getting $branch
echo From $repos
echo With args $dockerargs

name=$(get-name $1)

dockers=$(free-port)

docker pull ${tag}
CONTAINER=$(docker run -p ${dockers}548:548 -it -d ${tag} ${dockerargs})
echo "Started $CONTAINER"

if [ $(uname) = "Darwin" ]; then
	echo "Setting up AFP daemon"

	docker exec $CONTAINER sed -i "10s/.*/[${name}]/" /etc/afp.conf
	docker exec $CONTAINER sed -i "11s|.*|path = /code/${name}|" /etc/afp.conf
	docker exec $CONTAINER sed -i "16s/.*/valid users = afp/" /etc/afp.conf

	echo "Creating Login User"
	echo "afp:$CONTAINER" | docker exec -i $CONTAINER chpasswd
	docker exec $CONTAINER chown -R afp /code

	echo "Starting AFP daemon"

	docker exec $CONTAINER netatalk
	
	#docker exec $CONTAINER /docker-entrypoint.sh
fi

echo "Copying essential files"
for essential in $ESSENTIALS; do
	docker cp ~/$essential $CONTAINER:/root/$essential
	docker cp ~/$essential $CONTAINER:/code/$essential
done

docker exec $CONTAINER chown -R afp /code

echo "Checking out repos in container"
docker exec $CONTAINER /usr/bin/githop $repos :${branch}

if [ $(uname) = "Darwin" ]; then
	mkdir -p $name
	echo "Mounting Evide^H Workspace"

	echo mount_afp afp://afp:${CONTAINER}@localhost:${dockers}548/${name} ${name}
	mount_afp afp://afp:${CONTAINER}@localhost:${dockers}548/${name} ${name}	
	
fi

echo "Logging into container"
docker attach $CONTAINER

echo "Removing stale container"
docker rm $CONTAINER

if [ $(uname) = "Darwin" ]; then

	echo "Unmounting Workspace"
	diskutil unmount force $name &
	rm -r $name

fi

echo "Done."